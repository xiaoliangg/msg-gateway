diff --git a/node_modules/http-proxy/lib/http-proxy/index.js b/node_modules/http-proxy/lib/http-proxy/index.js
index 977a4b3..373af47 100644
--- a/node_modules/http-proxy/lib/http-proxy/index.js
+++ b/node_modules/http-proxy/lib/http-proxy/index.js
@@ -28,19 +28,25 @@ httpProxy.Server = ProxyServer;
 function createRightProxy(type) {
 
   return function(options) {
-    return function(req, res /*, [head], [opts] */) {
+    return function(req, res /*, [head], [opts] */) { // 当请求是ws类型时,res就是Socket类。已验证
       var passes = (type === 'ws') ? this.wsPasses : this.webPasses,
+          // yl https://stackoverflow.com/questions/2125714/explanation-of-slice-call-in-javascript
+          // yl 效果:make arguments a real Array
+          // yl 理解:[].slice 指的是数组类的一个函数类型的变量slice。 arguments是一个数组。 method.call(Object) 等价于 Object.method()
           args = [].slice.call(arguments),
           cntr = args.length - 1,
           head, cbl;
 
       /* optional args parse begin */
+      // 解析回调函数,并赋给cbl。如果需要回调函数的话，可以在最后一个参数传入
       if(typeof args[cntr] === 'function') {
         cbl = args[cntr];
 
         cntr--;
       }
 
+      // 混入该请求中特定的配置项 opts
+      // options 是原有配置项,倒数第二个参数传入该请求的特定配置项。 目标服务的地址在此参数传入，当然也可以传其他特定参数
       var requestOptions = options;
       if(
         !(args[cntr] instanceof Buffer) &&
@@ -54,12 +60,13 @@ function createRightProxy(type) {
         cntr--;
       }
 
+      // yl 如果倒数第三个参数类型为Buffer,那么赋给head变量
       if(args[cntr] instanceof Buffer) {
         head = args[cntr];
       }
 
       /* optional args parse end */
-
+      // 请求的目标地址
       ['target', 'forward'].forEach(function(e) {
         if (typeof requestOptions[e] === 'string')
           requestOptions[e] = parse_url(requestOptions[e]);
diff --git a/node_modules/http-proxy/lib/http-proxy/passes/con-info.js b/node_modules/http-proxy/lib/http-proxy/passes/con-info.js
new file mode 100644
index 0000000..6ca9309
--- /dev/null
+++ b/node_modules/http-proxy/lib/http-proxy/passes/con-info.js
@@ -0,0 +1,3 @@
+module.exports = {
+    conInfo: new Map()
+};
diff --git a/node_modules/http-proxy/lib/http-proxy/passes/ws-incoming.js b/node_modules/http-proxy/lib/http-proxy/passes/ws-incoming.js
index 270f23f..32586d3 100644
--- a/node_modules/http-proxy/lib/http-proxy/passes/ws-incoming.js
+++ b/node_modules/http-proxy/lib/http-proxy/passes/ws-incoming.js
@@ -1,6 +1,9 @@
 var http   = require('http'),
     https  = require('https'),
-    common = require('../common');
+    extend    = require('util')._extend,
+    common = require('../common'),
+    conInfo = require('./con-info'),
+    url = require('url');
 
 /*!
  * Array of passes.
@@ -17,6 +20,7 @@ var http   = require('http'),
 
 
 module.exports = {
+
   /**
    * WebSocket requests must have the `GET` method and
    * the `upgrade:websocket` header
@@ -97,9 +101,13 @@ module.exports = {
 
     common.setupSocket(socket);
 
-    if (head && head.length) socket.unshift(head);
+    if (head && head.length){
+      // 如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉
+      socket.unshift(head);
+    }
 
 
+    // 创建代理请求
     var proxyReq = (common.isSSL.test(options.target.protocol) ? https : http).request(
       common.setupOutgoing(options.ssl || {}, options, req)
     );
@@ -108,9 +116,11 @@ module.exports = {
     if (server) { server.emit('proxyReqWs', proxyReq, req, socket, options, head); }
 
     // Error Handler
+    // 向目标服务创建连接请求时失败
     proxyReq.on('error', onOutgoingError);
     proxyReq.on('response', function (res) {
       // if upgrade event isn't going to happen, close the socket
+      // 属性响应到客户端
       if (!res.upgrade) {
         socket.write(createHttpHeader('HTTP/' + res.httpVersion + ' ' + res.statusCode + ' ' + res.statusMessage, res.headers));
         res.pipe(socket);
@@ -118,45 +128,82 @@ module.exports = {
     });
 
     proxyReq.on('upgrade', function(proxyRes, proxySocket, proxyHead) {
-      proxySocket.on('error', onOutgoingError);
-
+      // yl 目标服务断开的监听
+      // 长连接建立完成后，目标服务异常断开
+      proxySocket.on('error', onOutgoingError2);
+      // proxySocket.on('error',function(err) {
+      //   if (clb) {
+      //     clb(err, req, socket);
+      //   } else {
+      //     // proxySocket.resetAndDestroy(); // 直接摧毁socket
+      //     // proxySocket.end(); // 猜测会走四次挥手过程。理解：目标服务断开连接时，应该不用再次主动关闭proxySocket。看之前的源码，目标服务报"error"时，会socket.end();客户端socket报 "error"时，会proxySocket.end()
+      //     server.emit('connectOtherNode', proxyReq, req, socket, options, head);
+      //   }
+      // });
       // Allow us to listen when the websocket has completed
-      proxySocket.on('end', function () {
-        server.emit('close', proxyRes, proxySocket, proxyHead);
+      proxySocket.on('end', function () { // 关闭测试用网页时,会进入此方法，客户端正常断开
+        var parseObj = url.parse(req.url,true);
+        conInfo.conInfo.delete(parseObj.query.uid);
+        server.emit('close', proxyRes, proxySocket, proxyHead,parseObj.query.uid,options.nid);
       });
 
       // The pipe below will end proxySocket if socket closes cleanly, but not
       // if it errors (eg, vanishes from the net and starts returning
       // EHOSTUNREACH). We need to do that explicitly.
       socket.on('error', function () {
+        // 长连接建立完成后，客户端侧异常断开
         proxySocket.end();
       });
 
       common.setupSocket(proxySocket);
 
-      if (proxyHead && proxyHead.length) proxySocket.unshift(proxyHead);
+      if (proxyHead && proxyHead.length){
+        proxySocket.unshift(proxyHead);
+      }
 
       //
       // Remark: Handle writing the headers to the socket when switching protocols
       // Also handles when a header is an array
       //
-      socket.write(createHttpHeader('HTTP/1.1 101 Switching Protocols', proxyRes.headers));
+      var parseObj = url.parse(req.url,true);
+      // yl 通过传参控制。迁移目标服务连接时，不需要再次写switch Protocols。 其他(首次连接时,首次连接不成功重试其他节点时)需要写switch Protocols
+      // if(!conInfo.conInfo.get(parseObj.query.uid)){
+      if(options.switchProtocols){
+        socket.write(createHttpHeader('HTTP/1.1 101 Switching Protocols', proxyRes.headers)); // yltodo 二次执行时不知道为何报错
+      }
+      // }
 
+      console.log('yl测试222');
       proxySocket.pipe(socket).pipe(proxySocket);
 
-      server.emit('open', proxySocket);
+      // 写入用户路由表
+      var parseObj = url.parse(req.url,true);
+
+      server.emit('open', proxySocket,parseObj.query.uid,options.nid);
       server.emit('proxySocket', proxySocket);  //DEPRECATED.
+
+      conInfo.conInfo.set(parseObj.query.uid,{req, socket, options, head,proxyReq,proxySocket});
     });
 
     return proxyReq.end(); // XXX: CHECK IF THIS IS THIS CORRECT
 
+    // switchProtocols仍旧使用之前的值，可能对应客户端首次连接时失败(switchProtocols=true)；或已建立长连接后，目标服务异常断开时，再连接新节点时异常(switchProtocols=false)。
     function onOutgoingError(err) {
       if (clb) {
         clb(err, req, socket);
       } else {
-        server.emit('error', err, req, socket);
+        server.emit('connectOtherNode', proxyReq, req, socket, options, head);
+      }
+      // socket.end();
+    }
+
+    // 对应已建立长连接后，目标服务异常断开时，再连接新节点时异常(switchProtocols=false)
+    function onOutgoingError2(err) {
+      if (clb) {
+        clb(err, req, socket);
+      } else {
+        server.emit('connectOtherNode', proxyReq, req, socket, extend(options,{switchProtocols:false}), head);
       }
-      socket.end();
     }
   }
 };
